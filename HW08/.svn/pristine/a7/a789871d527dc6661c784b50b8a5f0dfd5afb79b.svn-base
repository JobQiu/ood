package chatroom.model;

import java.awt.Container;
import java.awt.Graphics;
import java.awt.Image;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.swing.JPanel;

import chatapp.model.User;
import common.IChatroom;
import common.ICmd2ModelAdapter;
import common.IConnect;
import common.IUser;
import common.messages.AddMe;
import common.messages.InviteToChatroom;
import common.messages.RemoveMe;
import common.messages.RequestForAlgo;
import provided.datapacket.ADataPacket;
import provided.datapacket.ADataPacketAlgoCmd;
import provided.datapacket.DataPacket;
import provided.datapacket.DataPacketAlgo;
import provided.mixedData.MixedDataDictionary;

public class ChatroomModel implements IChatroom {
    
    /**
     * The generated serial version UID
     */
    private static final long serialVersionUID = 959411122322091727L;
    
    /**
     * The chat room UUID
     */
    private UUID id;
    
    /**
     * The chat room name
     */
    private String name;
    
    private IUser meHolder;
    
    private HashSet<IUser> users = new HashSet<>();
    
    private transient IChatroomViewAdapter viewAdapter;
    
    private DataPacketAlgo<String, IUser> dataPacketAlgo = new DataPacketAlgo<>(null);
    
    private ICmd2ModelAdapter adapter = new ICmd2ModelAdapter() {
        
        @Override
        public Container updateable() {
            return viewAdapter.createImageView();
        }
        
        @Override
        public Container scrollable() {
            return viewAdapter.createImageView();
        }
        
        @Override
        public ADataPacketAlgoCmd<String, ?, IUser> other() {
            return null;
        }
        
        @Override
        public MixedDataDictionary dictionary() {
            return null;
        }
    };
    
    public ChatroomModel(UUID id, String name, String username, Set<ChatroomModel> chatrooms) {
        this.id = id;
        this.name = name;
        InetAddress ip = null;
        try {
            ip = InetAddress.getByName(System.getProperty("java.rmi.server.hostname"));
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        
        initDataPacketAlgo();
        
        meHolder = new User(new IConnect() {
            
            @Override
            public void sendReceive(IUser me, ADataPacket data) throws RemoteException {
                data.execute(dataPacketAlgo, me);
            }
            
            @Override
            public IUser getUser(IConnect stub) throws RemoteException {
                return meHolder;
            }
            
            @Override
            public ADataPacketAlgoCmd<String, ?, IUser> getNewCommand(RequestForAlgo request) throws RemoteException {
                ADataPacketAlgoCmd<String, ?, IUser> cmd = null;
                if (request.unknownType().equals(Image.class)) {
                    cmd = new ADataPacketAlgoCmd<String, Image, IUser>() {

                        /**
                         * The generated serial version UID
                         */
                        private static final long serialVersionUID = 4378010340902571323L;
                        
                        private ICmd2ModelAdapter adapter;

                        @Override
                        public String apply(Class<?> index, DataPacket<Image> host, IUser... params) {
                            Container container = adapter.updateable();
                            JPanel panel = new JPanel() {

                                /**
                                 * The generated serial version UId
                                 */
                                private static final long serialVersionUID = 9079775736504582319L;

                                @Override
                                protected void paintComponent(Graphics g) {
                                    super.paintComponent(g);
                                    Image image = host.getData();
                                    int width = image.getWidth(null);
                                    int height = image.getHeight(null);
                                    if (width < container.getWidth() && height > container.getHeight()) {
                                        double scale = (container.getHeight() + 0.0) / height;
                                        height = container.getHeight();
                                        width = (int)(width * scale);
                                    } else if (width > container.getWidth() && height < container.getHeight()) {
                                        double scale = (container.getWidth() + 0.0) / width;
                                        width = container.getWidth();
                                        height = (int)(height * scale);
                                    } else if (width > container.getWidth() && height > container.getHeight()) {
                                        double wScale = (container.getWidth() + 0.0) / width;
                                        double hScale = (container.getHeight() + 0.0) / height;
                                        double scale = wScale < hScale ? wScale : hScale;
                                        width = (int)(width * scale);
                                        height = (int)(height * scale);
                                    }
                                    
                                    g.drawImage(host.getData(), 0, 0, width, height, null);
                                }
                                
                            };
                            
                            container.add(panel);
                            container.setBounds(100, 100, 900, 600);
                            return null;
                        }

                        @Override
                        public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {
                            adapter = cmd2ModelAdpt;
                        }
                    };
                }
                
                return cmd;
            }
            
            @Override
            public HashSet<IChatroom> getChatrooms() throws RemoteException {
                HashSet<IChatroom> result = new HashSet<>();
                for (IChatroom chatroom : chatrooms) {
                    result.add(chatroom);
                }
                
                return result;
            }
        }, username, ip);
        
        users.add(meHolder);
    }
    
    public void initDataPacketAlgo() {
        dataPacketAlgo.setDefaultCmd(new ADataPacketAlgoCmd<String, Object, IUser>() {

            /**
             * The generated serial version UID
             */
            private static final long serialVersionUID = -6066750783627231641L;

            @Override
            public String apply(Class<?> index, DataPacket<Object> host, IUser... params) {
                IConnect connect = params[0].getConnect();
                try {
                    ADataPacketAlgoCmd<String, ?, IUser> cmd = connect.getNewCommand(new RequestForAlgo(index));
                    dataPacketAlgo.setCmd(index, cmd);
                    cmd.setCmd2ModelAdpt(adapter);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
                
                return host.execute(dataPacketAlgo, params);
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
        });
        
        dataPacketAlgo.setCmd(String.class, new ADataPacketAlgoCmd<String, Object, IUser>() {

            /**
             * The generated serial version UID
             */
            private static final long serialVersionUID = -2319394090197028702L;

            @Override
            public String apply(Class<?> index, DataPacket<Object> host, IUser... params) {
                viewAdapter.append(params[0], host.getData().toString());
                return null;
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
        });
        
        dataPacketAlgo.setCmd(InviteToChatroom.class, new ADataPacketAlgoCmd<String, Object, IUser>() {

            /**
             * The generated serial version UID
             */
            private static final long serialVersionUID = 6120064986717684675L;

            @Override
            public String apply(Class<?> index, DataPacket<Object> host, IUser... params) {
                if (params[0].equals(meHolder)) {
                    return null;
                }
                
                viewAdapter.append(params[0], "Send an InviteToChatroom data packet");
                viewAdapter.warn("Please send the InviteToChatroom DataPacket via the main IConnect!");
                return null;
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
        });
        
        dataPacketAlgo.setCmd(AddMe.class, new ADataPacketAlgoCmd<String, Object, IUser>() {
            
            /**
             * The generated serial version UID
             */
            private static final long serialVersionUID = 6120064986717684675L;

            @Override
            public String apply(Class<?> index, DataPacket<Object> host, IUser... params) {
                viewAdapter.append(params[0], "Send an AddMe data packet");
                AddMe packetContent = (AddMe)host.getData();
                users.add(packetContent.me);
                viewAdapter.addUser(packetContent.me);
                return null;
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
        });
        
        dataPacketAlgo.setCmd(RemoveMe.class, new ADataPacketAlgoCmd<String, Object, IUser>() {

            /**
             * The generated serial version UID
             */
            private static final long serialVersionUID = 7590237238355887374L;

            @Override
            public String apply(Class<?> index, DataPacket<Object> host, IUser... params) {
                viewAdapter.append(params[0], "Send a RemoveMe data packet");
                RemoveMe packet = (RemoveMe)host.getData();
                users.remove(packet.me);
                return null;
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
        });
    }
    
    public void start() {
        viewAdapter.setTitle(name);
        viewAdapter.addUser(meHolder);
        viewAdapter.start();
    }
    
    public void sendMessage(String message) {
        send(new DataPacket<String>(String.class, message));
    }
    
    public void sendImage(Image image) {
        send(new DataPacket<Image>(Image.class, image));
    }

    public void setViewAdapter(IChatroomViewAdapter viewAdapter) {
        this.viewAdapter = viewAdapter;
    }
    
    public void send(ADataPacket message) {
        send(meHolder, message);
    }
    
    public IUser getMe() {
        return meHolder;
    }
    
    public void removeMe() {
        users.remove(meHolder);
        send(new DataPacket<RemoveMe>(RemoveMe.class, new RemoveMe(meHolder, id)));
    }

    @Override
    public UUID id() {
        return id;
    }

    @Override
    public HashSet<IUser> getUsers() {
        return users;
    }

    @Override
    public boolean addUser(IUser user) {
        users.add(user);
        return true;
    }

    @Override
    public boolean removeUser(IUser user) {
        users.remove(user);
        return true;
    }

    @Override
    public void send(IUser me, ADataPacket message) {
        users.iterator().forEachRemaining(
                (user) ->{ 
                    try{
                        user.getConnect().sendReceive(me, message);
                    }
                    catch(RemoteException e)
                    {
                        e.printStackTrace();
                    }
                });
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = hash * 23 + id.hashCode();
        hash = hash * 11 + name.hashCode();
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        
        if (obj instanceof IChatroom) {
            IChatroom chatroom = (IChatroom)obj;
            return id == chatroom.id();
        }
        
        return false;
    }

    @Override
    public String toString() {
        return name;
    }
}