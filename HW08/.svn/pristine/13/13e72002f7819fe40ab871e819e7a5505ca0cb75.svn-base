package chatroom.view;

import java.awt.BorderLayout;
import java.awt.FileDialog;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

public class ChatroomView<T> extends JFrame {

    private IChatroomModelAdapter modelAdapter;
    
    /**
     * The generated serial version UID
     */
    private static final long serialVersionUID = -5806443649707889704L;
    
    private JPanel contentPane;
    private final JPanel panel = new JPanel();
    private final JButton btnSend = new JButton("Send");
    private final JTextArea txtrInput = new JTextArea();
    private final JButton btnSendImage = new JButton("Send Image");
    private final JSplitPane splitPane = new JSplitPane();
    private final JScrollPane scrollPaneLeft = new JScrollPane();
    private final JScrollPane scrollPaneRight = new JScrollPane();
    private final JTextArea txtrDialog = new JTextArea();
    private final JList<T> listUsers = new JList<>();

    /**
     * Create the frame.
     */
    public ChatroomView(IChatroomModelAdapter modelAdapter) {
        this.modelAdapter = modelAdapter;
        initGui();
    }
    
    private void initGui() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setBounds(100, 100, 450, 300);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        contentPane.setLayout(new BorderLayout(0, 0));
        setContentPane(contentPane);
        
        contentPane.add(panel, BorderLayout.SOUTH);
        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
        
        panel.add(txtrInput);
        btnSendImage.addActionListener(e -> {
            FileDialog fileDialog = new FileDialog(new JFrame(), "Select a image", FileDialog.LOAD);
            fileDialog.setVisible(true);
            String imagePath = fileDialog.getDirectory() + fileDialog.getFile();
            
            try {
                ImageIcon image = new ImageIcon(ImageIO.read(new File(imagePath)));
                modelAdapter.sendImage(image);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        btnSend.addActionListener(e -> {
            String input = txtrInput.getText();
            if (!input.isEmpty()) {
                modelAdapter.sendMessage(input);
                
                txtrInput.setText("");
            }
        });
        
        panel.add(btnSend);
        
        panel.add(btnSendImage);
        
        contentPane.add(splitPane, BorderLayout.CENTER);
        
        splitPane.setLeftComponent(scrollPaneLeft);
        
        scrollPaneLeft.setViewportView(txtrDialog);
        
        splitPane.setRightComponent(scrollPaneRight);
        
        scrollPaneRight.setViewportView(listUsers);
        
        splitPane.setResizeWeight(0.9);
        
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent e) {
                super.windowClosed(e);
            }
        });
    }
    
    public void start() {
        setVisible(true);
    }
    
    public void append(String str) {
        
    }
}
