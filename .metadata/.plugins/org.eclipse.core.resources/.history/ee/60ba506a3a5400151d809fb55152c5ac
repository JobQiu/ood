package model.ball;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

/**
 * The abstract ball class
 * @author ls53@rice.edu
 */
public abstract class ABall implements Observer {
    
    /**
     * The location of a ball
     */
    protected Point location;
    
    /**
     * The radius of a ball
     */
    protected int radius;
    
    /**
     * The velocity of a ball
     */
    protected Point velocity;
    
    /**
     * The color of a ball
     */
    protected Color color;
    
    /**
     * The canvas containing a ball
     */
    protected Component canvas;
    
    /**
     * The constructor for a ball
     * @param startLoc The initial location of a ball
     * @param startRadius The initial radius of a ball
     * @param startVel The initial velocity of a ball
     * @param color The color of a ball
     * @param canvas The canvas containing a ball
     */
    public ABall(Point startLoc, int startRadius, Point startVel, Color color, Component canvas) {
        location = startLoc;
        radius = startRadius;
        velocity = startVel;
        this.color = color;
        this.canvas = canvas;
    }
    
    /**
     * This method is called whenever the observed object is changed. An
     * application calls an <tt>Observable</tt> object's
     * <code>notifyObservers</code> method to have all the object's
     * observers notified of the change.
     *
     * @param   o     the observable object.
     * @param   arg   an argument passed to the <code>notifyObservers</code>
     *                 method.
     */
    @Override
    public void update(Observable o, Object arg) {
        move();
        bounce();
        paint((Graphics)arg);
    }
    
    protected abstract void move();
    
    protected abstract void bounce();
    
    protected abstract void paint(Graphics g);
}