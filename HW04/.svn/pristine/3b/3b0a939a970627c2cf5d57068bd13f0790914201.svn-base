package model;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;

import javax.swing.JComponent;
import javax.swing.Timer;

import strategy.IStrategyFac;
import strategy.IUpdateStrategy;
import strategy.MultiStrategy;
import strategy.StraightStrategy;
import strategy.SwitcherStrategy;
import util.IRandomizer;
import util.Randomizer;
import view.IViewUpdateAdapter;


/**
 * The model in the ball world application.
 */
public class BallWorldModel {
	
	/**
	 * The timer period in milliseconds to update the model.
	 */
	private final static int TIME_SLICE_MILLS = 50;
	
	/**
	 * The timer that updates the model periodically.
	 */
	private Timer timer = new Timer(TIME_SLICE_MILLS, new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			viewAdapter.update();
		}
	});
	
	/**
	 * The dispatcher that dispatches update() calls to all balls.
	 */
	private final Dispatcher dispatcher = new Dispatcher();
	
	/** 
	 * The View adapter used to request view update.
	 */
	private IViewUpdateAdapter viewAdapter;
	
	/**
	 * The switchable strategy that switcher balls will use to update their states.
	 */
	private SwitcherStrategy switcherBallStrategy = new SwitcherStrategy(new StraightStrategy());
	
	/**
	 * A UpdateStrategy factory for a beeping error strategy that beeps the speaker every 25 updates.
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error 
	 * strategy, or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac(){
		/**
		 * Make the beeping error strategy
		 * @return  An instance of a beeping error strategy
		 */
		@Override
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0;
				/**
				 * Beep the speaker every 25 updates
				 */
				@Override
				public void updateState(ABall context) {
					if(25 < count++){
						java.awt.Toolkit.getDefaultToolkit().beep(); 
						count = 0;
					}
				}
			};
		}
	};
	
	
	/**
	 * The randomizer that generates ball properties randomly.
	 */
	private final IRandomizer randomizer = Randomizer.Singleton;
	
	/**
	 * Construct a model with given view adapter.
	 * @param viewAdapter The view adapter used to communicate with view.
	 */
	public BallWorldModel(IViewUpdateAdapter viewAdapter) {
		this.viewAdapter = viewAdapter;
	}

	/**
	 * Start the model.
	 */
	public void start() {
		timer.start();
	}
	
	
	/**
	 * Clear all balls in the model.
	 */
	public void clearBalls() {
		dispatcher.deleteObservers();
	}
	
	/**
	 * Add a ball with given update strategy which cannot be changed thereafter.
	 * @param strategy the strategy to update the state of the ball created
	 * @param canvas the canvas where the ball will be painted
	 */
	public void addBall(IUpdateStrategy strategy, JComponent canvas) {
		if(null == strategy) strategy = _errorStrategyFac.make();
		Point startingLoc = randomizer.randomLoc(canvas.getBounds());
		int radius = randomizer.randomInt(5, 20);
		Point velocity = randomizer.randomVel(new Rectangle(10, 10));
		Color color = randomizer.randomColor();
		dispatcher.addObserver(new ABall(startingLoc, radius, velocity, color, canvas, strategy));
	}
	
	
	/**
	 * Add a ball with the switchable strategy to the model.
	 * @param canvas The canvas where the ball will be moving and painted
	 */
	public void addSwitcherBall(JComponent canvas) {
		Point startingLoc = randomizer.randomLoc(canvas.getBounds());
		int radius = randomizer.randomInt(5, 20);
		Point velocity = randomizer.randomVel(new Rectangle(10, 10));
		Color color = randomizer.randomColor();
		dispatcher.addObserver(new ABall(startingLoc, radius, velocity, color, canvas, switcherBallStrategy));
	}
	
	/**
	 * Update all balls in the model.
	 * @param g	the graphics object used to paint balls
	 */
	public void update(Graphics g) {
		dispatcher.notifyAll(g);
	}
	
	
	/**
	 * Make a StrategyFac object that creates strategy instances of the the given type
	 * @param strategyName strategy type
	 * @return A StrategyFac object
	 */
	public IStrategyFac makeStrategyFac(String strategyName) {
		if (null == strategyName)  {
			return _errorStrategyFac;
		}
        return new IStrategyFac() {
		    /**
		     * Instantiate a strategy corresponding to the given class name.
		     * @return An IUpdateStrategy instance
		     */
		    public IUpdateStrategy make() {
		    	IUpdateStrategy strategy = loadStrategy(normalizeStrategyName(strategyName)); 
                if(null == strategy) {
                	strategy = _errorStrategyFac.make();
                }
		        return  strategy;
		    }

		    @Override
		    public String toString() {
		        return strategyName;
		    }
		};
	}
	
	
	/**
	 * Convert the strategy name passed from the view to the corresponding strategy class name
	 * under the strategy package. 
	 * @param strategyName the strategy name without Strategy suffix and strategy. package prefix
	 * @return the full strategy class name under strategy package
	 */
	private String normalizeStrategyName(String strategyName) {
		return "strategy." + strategyName + "Strategy";
	}
	
	/**
	 * Combine two update strategy Factories together that creates UpdateStrategy having a combination
	 * of behaviors of the two strategies that the factories correspond to.
	 * @param stratFac1 the first Strategy Factory to combine
	 * @param stratFac2 the second Strategy Factory to combine
	 * @return A IStrategyFac that can make instances of multistrategy, a combination of two strategies
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (null == stratFac1 || null == stratFac2) {
			return _errorStrategyFac;
		}
		return new IStrategyFac() {
			/**
		     * Instantiate a new MultiStrategy with the strategies from the given strategy factories
		     * @return A MultiStrategy instance
		     */
		    public IUpdateStrategy make() {
		        return new MultiStrategy(stratFac1.make(), stratFac2.make());
		    }
		    /**
		     * Return a string that is the toString()'s of the given strategy factories concatenated with a "-"
		     */
		    public String toString() {
		        return stratFac1.toString() + "-" + stratFac2.toString();
		    }
		};
	}
	
	/**
	 * Set the switchable strategy in current model that all switcher balls use.
	 * @param strategy the new update strategy for all switcher balls
	 */
	public void setSwitcherStrategy(IUpdateStrategy strategy) {
		switcherBallStrategy.setUpdateStrategy(strategy);
	}
	
	/**
	 * Get the switchable strategy that is currently used by all switcher balls in the model.
	 * @return the switchable strategy
	 */
	public SwitcherStrategy getSwitcherStrategy() {
		return switcherBallStrategy;
	}
	
	
	/**
	 * Dynamically load an IUpdateStrategy instance of the given type.
	 * @param className the type of update strategy to load
	 * @return A concrete IUpdateStrategy instance of given type
	 */
	private IUpdateStrategy loadStrategy(String className) {
	    try {
	        Object[] args = new Object[0];
	        java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors();  // get all the constructors
	        java.lang.reflect.Constructor<?> c = null;
	        for(int i=0;i < cs.length; i++) {  // find the first constructor with the right number of input parameters
	            if(args.length == (cs[i]).getParameterTypes().length) {
	                c = cs[i];
	                break;
	            }
	        }
	        return (IUpdateStrategy) c.newInstance(args);   // Call the constructor.   Will throw a null ptr exception if no constructor with the right number of input parameters was found.
	    }
	    catch(Exception ex) {
	    	System.err.println("Class "+className+" failed to load. \nException = \n"+ ex);
	    	ex.printStackTrace();  // print the stack trace to help in debugging.
	    	return null;    // Is this really a useful thing to return here?  Is there something better that could be returned?
	    }
	}
	
	/**
	 * The dispatcher class that dispatches update calls of model to balls.
	 */
	static class Dispatcher extends Observable {
		/**
		 * Notify all observers of state change.
		 * @param g the graphics object to paint all balls.
		 */
		public void notifyAll(Graphics g) {
			setChanged();
			notifyObservers(g);
		}
	}
}
