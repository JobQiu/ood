package strategy;

import model.ABall;

/**
 * An IUpdateStrategy implementation that can change its underlying update strategy dynamically.
 *
 */
public class SwitcherStrategy implements IUpdateStrategy {
	/**
	 * The underlying update strategy in use.
	 */
	private IUpdateStrategy updateStrategy;
	
	/**
	 * Construct a SwitcherStrategy with the given update strategy as the initial one to use.
	 * @param strategy the initial update strategy
	 */
	public SwitcherStrategy(IUpdateStrategy strategy) {
		updateStrategy = strategy;
	}

	@Override
	public void updateState(ABall context) {
		updateStrategy.updateState(context);
	}
	
	/**
	 * Get the underlying update strategy in use.
	 * @return the current update strategy in use.
	 */
	public IUpdateStrategy getUpdateStrategy() {
		return updateStrategy;
	}
	
	/**
	 * Set the underlying strategy to a new strategy.
	 * @param strategy the new udpate strategy to use
	 */
	public void setUpdateStrategy(IUpdateStrategy strategy) {
		if(strategy == null) {
			throw new IllegalArgumentException("Update Strategy cannot be null");
		}
		updateStrategy = strategy;
	}

}
