package controller;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Graphics;

import model.Ball;
import model.BallModel;
import strategies.IStrategyFac;
import view.IModelUpdateAdapter;
import view.IModelControlAdapter;
import view.View;

/**
 * MVC Controller for the system
 * Instantiate the model and view, then start them
 * @author JacobChen
 * 
 */
public class Controller<TDropListItem> {

	/** Model object that contains all business logic for balls */
	private BallModel _model;

	/** View object for ballWorld */
	@SuppressWarnings("rawtypes")
	private View _view;

	/**
	 * Controller constructor builds the system
	 */
	public Controller() {

		/**
		 * Instantiate new models for balls
		 */
		_model = new BallModel( new model.IViewControlAdapter() {
			/**
			 * gets the canvas of the view
			 * @return canvas of the view
			 */
			@Override
			public Component getCanvas() {
				return _view.getCanvas();
			}
		} , new model.IViewUpdateAdapter(){
			/**
			 * Pass the update request to the view.
			 */
			@Override
			public void update() {
				_view.update();
			}
		}); 

		/**
		 * Instantiate a new view for ballWorld
		 */
		_view = new View<IStrategyFac>(new IModelControlAdapter<IStrategyFac> () {  
	        
	       /* (non-Javadoc)
	        * @see view.IModelControlAdapter#addStrategy(java.lang.String)
	        * Returns an IStrategyFac that can instantiate the strategy specified
	        * by classname. Returns null if classname is null. The toString() of
	        * the returned factory is the classname.
	        * @param classname  Shortened name of desired strategy 
	        * @return A factory to make that strategy
	        */
	       public IStrategyFac addStrategy(String classname) {
	           return _model.makeStrategyFac(classname);
	       }
	   
	       /* (non-Javadoc)
	        * @see view.IModelControlAdapter#makeBall(java.lang.Object)
	        * Make a ball with the selected short strategy name
	        * @param selectedItem  A shorten class name for the desired strategy
	        */
	       public void makeBall(IStrategyFac selectedItem) {
	    	   Ball _ball = _model.loadBall(selectedItem.make(), _view.getCanvas());
	    	   if (_ball != null) {
					_model.addToDispatcher(_ball);
			   }
	       }
	       
	       /* (non-Javadoc)
	        * @see view.IModelControlAdapter#combineStrategies(java.lang.Object, java.lang.Object)
	        * Returns an IStrategyFac that can instantiate a MultiStrategy with the
	        * two strategies made by the two given IStrategyFac objects. Returns
	        * null if either supplied factory is null. The toString() of the
	        * returned factory is the toString()'s of the two given factories,
	        * concatenated with "-".            
	        * @param selectedItem1 An IStrategyFac for a strategy
	        * @param selectedItem2 An IStrategyFac for a strategy
	        * @return An IStrategyFac for the composition of the two strategies
	        */
	       public IStrategyFac combineStrategies(IStrategyFac selectedItem1, IStrategyFac selectedItem2) {
	           return _model.combineStrategyFacs(selectedItem1, selectedItem2);
	       }

		   /* (non-Javadoc)
		    * @see view.IModelControlAdapter#clearBalls()
		    * Clear all balls from the screen.
		    */
		   @Override
		   public void clearBalls() {
			   _model.clearBalls();
		   }
	            
	       // etc.
	   }, 
	   new IModelUpdateAdapter<TDropListItem>() {
	       /**
	       * Pass the update request to the model.
	       * @param g The Graphics object the balls use to draw themselves.
	       */
	       public void update(Graphics g) {
	           _model.update(g);
	       }
	   });

	}

	/**
	 * Start the system
	 */
	public void start() {
		_model.start();
		_view.start();
	}

	/**
	 * Launch the application.
	 * @param args Arguments given by the system or command line.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() { // Java specs say that the system must be constructed on the GUI event thread.
			public void run() {
				try {
					/** instantiate the system */
					@SuppressWarnings("rawtypes")
					Controller controller = new Controller();
					/** start the system */
					controller.start();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
