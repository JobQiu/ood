package model;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.reflect.Constructor;
import java.util.Observer;

import javax.swing.Timer;

import model.strategy.IStrategyFac;
import model.strategy.IUpdateStrategy;
import model.strategy.MultiStrategy;
import model.strategy.SwitcherStrategy;
import util.Dispatcher;
import util.Randomizer;

/**
 * Construct a ball model which contains business logic
 * @author JacobChen, Li Shen
 *
 */
public class BallModel {

    /**
     * Adapter for controlling view
     */
	private IViewControlAdapter viewControlAdpt = IViewControlAdapter.NULL_OBJECT;
	
	/**
	 * Adapter for updating view
	 */
	private IViewUpdateAdapter viewUpdateAdpt = IViewUpdateAdapter.NULL_OBJECT;

	/**
	 * The dispatcher that all observers will be added to
	 */
	private Dispatcher dispatcher = new Dispatcher();
	
	/**
	 * The time slice for updating view
	 */
	private static final int timeSlice = 50;

	/**
	 * The timer that queues events that run on the GUI thread
	 */
	private Timer timer = new Timer(timeSlice, (e) -> viewUpdateAdpt.update());

	/** New strategy switcher object */
	private SwitcherStrategy switcher = new SwitcherStrategy();

	/**
	 * Constructor for BallModel class
	 * @param viewCtrlAdpt model to view adapter communication instance
	 * @param viewUpdateAdpt model to view adapter updater instance
	 */
	public BallModel(IViewControlAdapter viewCtrlAdpt, IViewUpdateAdapter viewUpdateAdpt) {
		viewControlAdpt = viewCtrlAdpt;
		this.viewUpdateAdpt = viewUpdateAdpt;
	}

	/**
	 * Start the timer
	 * the model can be fully constructed before it starts doing anything. 
	 * the controller will call this method once everything is fully constructed.
	 */
	public void start() {
		timer.start();
	}

	/**
	 * This is the method that is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by 
	 * painting all the sprites onto the given Graphics object.
	 * @param g The Graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		/** The Graphics object is being given to all the sprites (Observers) */
		dispatcher.notifyAll(g);
	}

	/**
	 * A factory for a beeping error strategy that beeps the speaker every 25 updates.
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy,
	 * or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac() {
		@Override
		/**
		 * Make the beeping error strategy
		 * @return  An instance of a beeping error strategy
		 */
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0; // update counter

				@Override
				/**
				 * Beep the speaker every 25 updates
				 */
				public void updateState(Ball context) {
					if (25 < count++) {
						java.awt.Toolkit.getDefaultToolkit().beep();
						count = 0;
					}
				}
			};
		}
	};

	/**
	* The following method returns an instance of a strategy, given a fully qualified 
	* class name of a specific strategy.
	* The method assumes that there is only one constructor for the supplied class that 
	* has the same *number* of input parameters as specified in the args array and that 
	* it conforms to a specific signature, i.e. specific order and types of input parameters 
	* in the args array.
	* @param className A string that is the fully qualified class name of the desired object
	*/
	private IUpdateStrategy loadStrategy(String className) {
		try {
			Object[] args = new Object[] {}; // CONSTRUCTOR 
			Constructor<?> cs[] = Class.forName(className).getConstructors(); // get all the constructors
			Constructor<?> c = null;

			/**
			 * find the first constructor with the right number of input parameters
			 */
			for (int i = 0; i < cs.length; i++) {
				if (args.length == (cs[i]).getParameterTypes().length) {
					c = cs[i];
					break;
				}
			}
			return (IUpdateStrategy) c.newInstance(args); // Call the constructor.   Will throw a null ptr exception if no constructor with the right number of input parameters was found.
		} catch (Exception ex) {

			System.err.println("Class " + className + " failed to load. \nException = \n" + ex);

			/** if an error occurs, return some valid strategy */
			return _errorStrategyFac.make();
		}
	}

	/**
	 * instantiate and load a ball with a given strategy object
	 * and with random initial values for all fields of a ball
	 * @param _strategy what strategy of ball is expected to load
	 * @return A ball with the desired strategy
	 */
	public Ball loadBall(IUpdateStrategy _strategy) {
		Component canvas = viewControlAdpt.getCanvas();
		int startRadius = Randomizer.Singleton.randomInt(10, 30); // startRadius

		Dimension rectLoc = canvas.getSize();
		Point startLoc = Randomizer.Singleton.randomLoc(rectLoc); // startLoc

		Rectangle rectVel = new Rectangle((int) Math.ceil(rectLoc.width / 30), (int) Math.ceil(rectLoc.height / 30));
		Point startVel = Randomizer.Singleton.randomVel(rectVel); // startVel

		Color startColor = Randomizer.Singleton.randomColor(); // startColor

		return new Ball(startRadius, startColor, startVel, startLoc, canvas, _strategy);
	}

	/**
	 * This method is used to save the user's typing by converting the 
	 * abbreviated strategy class name into it's fully qualified form.
	 * An error is given if the input is not a valid class name
	 * @param classname the abbreviated strategy class name
	 * @return str the fully qualified form of the desired strategy
	 */
	public String fixName(Object classname) {
		return "model.strategy." + classname + "Strategy";
	}

	/**
	 * Returns an IStrategyFac that can instantiate the strategy specified by
	 * classname. Returns a factory for a beeping error strategy if classname is null. 
	 * The toString() of the returned factory is the classname.
	 * @param classname  Shortened name of desired strategy
	 * @return A factory to make that strategy
	 * @author supplied code
	 */
	public IStrategyFac makeStrategyFac(final String classname) {
		if (null == classname)
			return _errorStrategyFac;

		return new IStrategyFac() {
			/**
			 * Instantiate a strategy corresponding to the given class name.
			 * @return An IUpdateStrategy instance
			 */
			public IUpdateStrategy make() {
				return loadStrategy(fixName(classname));
			}

			/**
			 * Return the given class name string
			 */
			public String toString() {
				return classname;
			}
		};
	}

	/**
	 * Returns an IStrategyFac that can instantiate a MultiStrategy with the two
	 * strategies made by the two given IStrategyFac objects. Returns null if
	 * either supplied factory is null. The toString() of the returned factory
	 * is the toString()'s of the two given factories, concatenated with "-". 
	 * If either factory is null, then a factory for a beeping error strategy is returned.
	 * 
	 * @param stratFac1 An IStrategyFac for a strategy
	 * @param stratFac2 An IStrategyFac for a strategy
	 * @return An IStrategyFac for the composition of the two strategies
	 * @author supplied code
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (null == stratFac1 || null == stratFac2)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a new MultiStrategy with the strategies from the given strategy factories
			 * @return A MultiStrategy instance
			 */
			public IUpdateStrategy make() {
				return new MultiStrategy(stratFac1.make(), stratFac2.make());
			}

			/**
			 * Return a string that is the toString()'s of the given strategy factories concatenated with a "-"
			 */
			public String toString() {
				return stratFac1.toString() + "-" + stratFac2.toString();
			}
		};
	}

	/**
	 * gets a strategy to switch to 
	 * @return a strategy to switch to
	 */
	public SwitcherStrategy getSwitcherStrategy() {
		return switcher;
	}

	/**
	 * Sets the strategy for the switcher
	 * @param strategy Strategy for switcher
	 */
	public void switchSwitcherStrategy(IUpdateStrategy strategy) {
		switcher.setStrategy(strategy);
	}

	/**
	 * Add a sprite to dispatcher
	 * This method will be invoked by addBall(...) method in Controller
	 * to actually add balls as observers.
	 * @param aSprite an observer that will be added to dispatcher
	 */
	public void addToDispatcher(Observer aSprite) {
		if (aSprite != null) {
			dispatcher.addObserver(aSprite);
		}
	}

	/**
	 * Remove sprite from dispatcher
	 * This method will be invoked by clearBalls() method in Controller
	 * to actually remove all balls from the screen.
	 */
	public void clearBalls() {
		dispatcher.deleteObservers();
	}
}